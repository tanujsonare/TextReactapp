{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","Link","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","href","react_link","target","rel","user","onClick","darkMode","style","backgroundColor","color","borderColor","htmlFor","role","placeholder","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","value","onChange","event","currentTarget","rows","convertedUppercaseText","toUpperCase","convertedLowercaseText","toLowerCase","intialText","split","join","document","getElementById","navigator","clipboard","writeText","filter","element","length","About","setStyle","textContent","defaultProps","userEmail","App","setDarkMode","Router","body","Routes","Route","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.9cee829e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nexport default function Navbar(props) {\n    // const darkModeButtonStyle = {\n    //     backgroundColor: \"grey\",\n    //     color: \"black\",\n    //     borderColor: \"white\"\n    // }\n    // const lightModeButtonStyle = {\n    //     backgroundColor: \"black\",\n    //     color: \"black\",\n    //     borderColor: \"white\"\n    // }\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode === true ? \"dark\" : \"light\"} bg-${props.mode === true ? \"dark\" : \"light\"}`}>\n            <div className=\"container-fluid\">\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\" />\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/about\">About</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link active\" aria-current=\"page\" href={props.react_link} target=\"_blank\" rel=\"noreferrer\">React Doc</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link disabled\" href='/'><b>{props.user}</b></a>\n                        </li>\n                    </ul>\n                    <div className=\"form-check form-switch\">\n                        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.darkMode} id=\"flexSwitchCheckDefault\" style={props.mode === true? {backgroundColor: \"grey\", color: \"black\", borderColor: \"white\"}: {backgroundColor: \"grey\", color: \"black\", borderColor: \"white\"}}/>\n                        <label className={`form-check-label text-${props.mode === true ? \"light\" : \"dark\"}`} htmlFor=\"flexSwitchCheckDefault\">{props.mode === true ? \"Enable Light Mode\" : \"Enable Dark Mode\"}</label>\n                    </div>\n                    <form className=\"d-flex\" role=\"search\">\n                        <input className=\"form-control me-2 mx-4\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n                    </form>\n                </div>\n            </div>\n        </nav>\n    );\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    user: PropTypes.string.isRequired,\n};\n\nNavbar.defaultProps = {\n    title: 'Navbar',\n    user: 'Guest User',\n};\n","import React, { useState } from 'react';\n\nexport default function TextForm(props) {\n    const [text, setText] = useState(\"\");\n    const showUppercaseText = () => {\n        let convertedUppercaseText= text.toUpperCase();\n        setText(convertedUppercaseText);\n    };\n    const textChange = (event) => {\n        setText(event.currentTarget.value);\n    };\n    const clearText = () => {\n        setText('');\n    };\n    const showLowercaseText = ()=>{\n        let convertedLowercaseText = text.toLowerCase();\n        setText(convertedLowercaseText);\n    }\n    const copyText = ()=>{\n        let text = document.getElementById(\"message\");\n        navigator.clipboard.writeText(text.value);\n    }\n    const removeExtraSpaces = ()=>{\n        let intialText = text.split(/[ ]+/);\n        setText(intialText.join(\" \"));\n    }\n    return (\n        // use \"props.mode &&\" when this condition is mandatory \n        <>\n        <div className='container' style={{color: props.mode===true ? \"white\" : \"black\"}}>\n            <h2 className=\"mt-4\">{props.title}</h2>\n            <div className=\"mb-3 mt-4\">\n                <textarea className=\"form-control text_to_convert\" value={text} onChange={textChange} id=\"message\" rows=\"8\" style={{backgroundColor: props.mode===true ? \"#a4a7a7\" : \"white\", color: props.mode===true ? \"white\" : \"black\"}}/>\n                <div>\n                    <button className=\"btn btn-primary mt-4\" onClick={showUppercaseText}>Uppercase</button>\n                    <button className=\"btn btn-primary mt-4 mx-2\" onClick={showLowercaseText}>Lowercase</button>\n                    <button className=\"btn btn-primary mt-4 mx-2\" onClick={removeExtraSpaces}>Remove Extraspaces</button>\n                    <button className=\"btn btn-success mt-4 mx-2\" onClick={copyText}>Copy</button>\n                    <button className=\"btn btn-danger mt-4 mx-2\" onClick={clearText}>Clear</button>\n                </div>\n            </div>\n        </div>\n        <div className=\"container\" style={{color: props.mode===true ? \"white\" : \"black\"}}>\n            <h3 className='mt-4'>Your Text Summary</h3>\n            <p>{text.split(\" \").filter((element)=>{return element != 0}).length} words and {text.length} characters</p>\n            <p>Time required to read this preview {0.008 * text.split(\" \").length} minutes.</p>\n            <h3 className='mt-4'>Preview</h3>\n            <p>{text.length>0 ? text : \"Please Enter some text in box to see preview.\"}</p>\n        </div>\n        </>\n    );\n}\n","import React, {useState} from 'react'\n\nexport default function About() {\n    const [style, setStyle] = useState({\n        color: \"black\",\n        backgroundColor: \"white\"\n    })\n    const changeMode = (event)=>{\n        if (event.target.textContent === \"Enable Dark Mode\"){\n            setStyle({\n                color: \"white\",\n                backgroundColor: \"black\"\n            })\n            event.target.textContent = \"Enable Light Mode\"\n            event.target.className = 'btn btn-light mt-4'\n        }else if (event.target.textContent === \"Enable Light Mode\"){\n            setStyle({\n                color: \"black\",\n                backgroundColor: \"white\"\n            })\n            event.target.textContent = \"Enable Dark Mode\"\n            event.target.className = 'btn btn-dark mt-4'\n        }\n    }\n    return (\n        <div className='container' style={style}>\n            <div className=\"container\">\n                <button className=\"btn btn-dark mt-4\" onClick={changeMode}>Enable Dark Mode</button>\n            </div>\n            <section className=\"terms\">\n                <div className=\"container py-5 px-4\" id=\"en\">\n                    <h1 className=\"title text-center mb-5\">React App for Text Utils</h1>\n                    <p>An application to perform some actions on text.</p>\n                </div>\n            </section>\n        </div>\n    )\n}\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport React, { useState } from 'react'\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\";\n\nconst userEmail = 'tester@gmail.com';\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false);\n  const darkmodeEnableDisable = ()=>{\n    if (darkMode === false){\n      setDarkMode(true);\n      document.body.style.backgroundColor= \"#565c5e\";\n      document.body.style.color= \"white\";\n    }else{\n      setDarkMode(false);\n      document.body.style.backgroundColor= \"white\";\n      document.body.style.color= \"black\";\n    }\n  }\n  return (\n    <div>\n        <Router>\n          <Navbar title=\"My React App\" user={userEmail} react_link=\"https://legacy.reactjs.org/docs/getting-started.html\" mode={darkMode} darkMode={darkmodeEnableDisable} />\n          <Routes>\n            <Route path='/' element={\n              <div className=\"container\">\n                <TextForm title=\"Enter your text below for conversion\" mode={darkMode} />\n              </div>\n            } />\n            <Route path='/about' element={<About />} />\n          </Routes>\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}